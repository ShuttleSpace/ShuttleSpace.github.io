import{_ as e,c as s,a2 as i,o as t}from"./chunks/framework.CQcFAaaG.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"package/local_package_old.md","filePath":"package/local_package_old.md"}'),n={name:"package/local_package_old.md"};function p(l,a,o,c,d,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h3 id="note" tabindex="-1">Note <a class="header-anchor" href="#note" aria-label="Permalink to &quot;Note&quot;">​</a></h3><p>This is a very early packaging solution, incompatible with <code>add_requires()</code> and <code>add_packages()</code>, and is gradually being deprecated.</p><p>2.5.5 Start to adopt the new local package solution, see for details: <a href="/xmake-docs/package/local_package.html">New local package solution</a>.</p><p>If you still want to use the old packaging method, you can execute the following command to specify the package format: <code>oldpkg</code></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package -f oldpkg</span></span></code></pre></div><p>To replace the previous</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package</span></span></code></pre></div><h3 id="packaging-instructions" tabindex="-1">Packaging instructions <a class="header-anchor" href="#packaging-instructions" aria-label="Permalink to &quot;Packaging instructions&quot;">​</a></h3><p>By including a dependency package directory and some binary library files in the project, it is convenient to integrate some third-party dependency libraries. This method is relatively simple and straightforward, but the disadvantages are also obvious and inconvenient to manage.</p><p>Take the tbox project as an example. The dependency package is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- base.pkg</span></span>
<span class="line"><span>- zlib.pkg</span></span>
<span class="line"><span>- polarssl.pkg</span></span>
<span class="line"><span>- openssl.pkg</span></span>
<span class="line"><span>- mysql.pkg</span></span>
<span class="line"><span>- pcre.pkg</span></span>
<span class="line"><span>- ...</span></span></code></pre></div><p>If you want the current project to recognize loading these packages, you first need to specify the package directory path, for example:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_packagedirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Once specified, you can add integration package dependencies in the target scope via the <a href="/xmake-docs/manual/project_target.html?id=targetadd_packages">add_packages</a> interface, for example:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    add_packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zlib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;polarssl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pcre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>So how to generate a *.pkg package, if it is based on xmake project, the generation method is very simple, only need:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cd tbox</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package</span></span></code></pre></div><p>You can generate a tbox.pkg cross-platform package in the build directory for use by third-party projects. I can also directly set the output directory and compile and generate it into the other project, for example:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cd tbox</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package -o ../test/packages</span></span></code></pre></div><p>In this way, the test project can pass <a href="/xmake-docs/manual/project_target.html?id=targetadd_packages">add_packages</a> and <a href="/xmake-docs/manual/global_interfaces.html?id=add_packagedirs">add_packagedirs</a> to configure and use the tbox.pkg package.</p><p>For a detailed description of the built-in package, you can also refer to the following related article, which is described in detail: <a href="https://tboox.org/cn/2016/08/06/add-package-and-autocheck/" target="_blank" rel="noreferrer">Dependency package addition and automatic detection mechanism</a></p>`,21)]))}const g=e(n,[["render",p]]);export{k as __pageData,g as default};
