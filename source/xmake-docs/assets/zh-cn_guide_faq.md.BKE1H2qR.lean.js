import{_ as i,a,b as e}from"./chunks/xmake-remote.BGv5sTD8.js";import{_ as h,c as t,a2 as p,o as l}from"./chunks/framework.CQcFAaaG.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-cn/guide/faq.md","filePath":"zh-cn/guide/faq.md"}'),n={name:"zh-cn/guide/faq.md"};function k(d,s,r,F,o,g){return l(),t("div",null,s[0]||(s[0]=[p(`<h2 id="怎样获取更多参数选项信息" tabindex="-1">怎样获取更多参数选项信息？ <a class="header-anchor" href="#怎样获取更多参数选项信息" aria-label="Permalink to &quot;怎样获取更多参数选项信息？&quot;">​</a></h2><p>获取主菜单的帮助信息，里面有所有action和plugin的列表描述。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--help]</span></span></code></pre></div><p>获取配置菜单的帮助信息，里面有所有配置选项的描述信息，以及支持平台、架构列表。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--help]</span></span></code></pre></div><p>获取action和plugin命令菜单的帮助信息，里面有所有内置命令和插件任务的参数使用信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--help]</span></span></code></pre></div><p>例如，获取<code>run</code>命令的参数信息:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><h2 id="怎样实现静默构建-不输出任何信息" tabindex="-1">怎样实现静默构建，不输出任何信息？ <a class="header-anchor" href="#怎样实现静默构建-不输出任何信息" aria-label="Permalink to &quot;怎样实现静默构建，不输出任何信息？&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--quiet]</span></span></code></pre></div><h2 id="如果xmake运行失败了怎么办" tabindex="-1">如果xmake运行失败了怎么办？ <a class="header-anchor" href="#如果xmake运行失败了怎么办" aria-label="Permalink to &quot;如果xmake运行失败了怎么办？&quot;">​</a></h2><p>可以先尝试清除下配置，重新构建下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>如果还是失败了，请加上 <code>-v</code> 或者 <code>--verbose</code> 选项重新执行xmake后，获取更加详细的输出信息</p><p>例如：</p><div class="language-hash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ xmake [-v|--verbose]</span></span></code></pre></div><p>并且可以加上 <code>-D</code> 选项获取出错时的xmake的调试栈信息和其他更详细的诊断信息, 然后你可以提交这些信息到<a href="https://github.com/xmake-io/xmake/issues" target="_blank" rel="noreferrer">issues</a>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><h2 id="怎样看实时编译警告信息" tabindex="-1">怎样看实时编译警告信息? <a class="header-anchor" href="#怎样看实时编译警告信息" aria-label="Permalink to &quot;怎样看实时编译警告信息?&quot;">​</a></h2><p>为了避免刷屏，在构建时候，默认是不实时输出警告信息的，如果想要看的话可以加上<code>-w</code>选项启用编译警告输出就行了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--warning]</span></span></code></pre></div><h2 id="怎样基于源码自动生成xmake-lua" tabindex="-1">怎样基于源码自动生成xmake.lua？ <a class="header-anchor" href="#怎样基于源码自动生成xmake-lua" aria-label="Permalink to &quot;怎样基于源码自动生成xmake.lua？&quot;">​</a></h2><p>如果你想临时写一两个测试代码、或者手上有一些移植过来的零散源码想要快速编译运行，可以不用专门xmake.lua，直接运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>xmake会自动扫描分析当前的源码目录，识别程序结构和类型，生成一个xmake.lua，并且会尝试直接构建它。</p><p>如果编译成功，可以直接运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><p>当然，如果仅仅只是想要生成xmake.lua，默认不去构建，可以执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div><p>更多相关介绍，请参考文章：<a href="https://tboox.org/cn/2017/01/07/build-without-makefile/" target="_blank" rel="noreferrer">xmake新增智能代码扫描编译模式，无需手写任何make文件</a></p><h2 id="为什么-xmake-lua-会被执行多遍" tabindex="-1">为什么 xmake.lua 会被执行多遍？ <a class="header-anchor" href="#为什么-xmake-lua-会被执行多遍" aria-label="Permalink to &quot;为什么 xmake.lua 会被执行多遍？&quot;">​</a></h2><p>xmake.lua里面分描述域和脚本域，在描述域里面会对各种配置域进行分阶段多次解析，有可能会执行多遍，因此不要在描述域写复杂的脚本。</p><p>如果要写各种复杂脚本，请在脚本域内进行配置，<code>target/on_load</code>的脚本域里面同样可以灵活配置各种target相关设置，并且提供更强大的lua脚本模块支持。</p><p>更多细节见：<a href="/xmake-docs/zh-cn/guide/syntax_description.html">描述语法说明</a></p><h2 id="如何调试-xmake-源码" tabindex="-1">如何调试 Xmake 源码? <a class="header-anchor" href="#如何调试-xmake-源码" aria-label="Permalink to &quot;如何调试 Xmake 源码?&quot;">​</a></h2><h3 id="下载源码" tabindex="-1">下载源码 <a class="header-anchor" href="#下载源码" aria-label="Permalink to &quot;下载源码&quot;">​</a></h3><p>由于 Xmake 使用了 git submodules 维护子模块，因此我们可以通过下面几种方式拉取完整源码。</p><h4 id="使用-git-拉取" tabindex="-1">使用 git 拉取 <a class="header-anchor" href="#使用-git-拉取" aria-label="Permalink to &quot;使用 git 拉取&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xmake-io/xmake.git</span></span></code></pre></div><p>或者</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xmake-io/xmake.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span></span></code></pre></div><h4 id="从-github-releases-下载源码包" tabindex="-1">从 Github Releases 下载源码包 <a class="header-anchor" href="#从-github-releases-下载源码包" aria-label="Permalink to &quot;从 Github Releases 下载源码包&quot;">​</a></h4><p>由于 github 本身的 downloads 附件下载不支持归档 submodules，因此 Xmake 每次发版都会完整打包一份额外的 tar 包源码上传到 Releases 上。</p><p>因此，不要下载错误的链接地址</p><ul><li>不完整源码：<a href="https://github.com/xmake-io/xmake/archive/refs/tags/v2.7.2.tar.gz" target="_blank" rel="noreferrer">https://github.com/xmake-io/xmake/archive/refs/tags/v2.7.2.tar.gz</a></li><li>完整源码包：<a href="https://github.com/xmake-io/xmake/releases/download/v2.7.2/xmake-v2.7.2.tar.gz" target="_blank" rel="noreferrer">https://github.com/xmake-io/xmake/releases/download/v2.7.2/xmake-v2.7.2.tar.gz</a></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xmake-io/xmake/releases/download/v2.7.2/xmake-v2.7.2.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake-v2.7.2.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>!&gt; Xmake 的 tar 源码包没有顶层 xmake 根目录，因此解压时候最好带上 <code>-C xmake</code> 指定下输出目录。</p><h3 id="编译源码" tabindex="-1">编译源码 <a class="header-anchor" href="#编译源码" aria-label="Permalink to &quot;编译源码&quot;">​</a></h3><h4 id="在-windows-上编译" tabindex="-1">在 Windows 上编译 <a class="header-anchor" href="#在-windows-上编译" aria-label="Permalink to &quot;在 Windows 上编译&quot;">​</a></h4><p>如果是在 Windows 编译 Xmake 源码，需要借助现有的 Xmake 预构建版本进行自举编译。</p><p>因此我们需要先参考 <a href="https://xmake.io/#/zh-cn/guide/installation?id=windows" target="_blank" rel="noreferrer">Windows 安装 Xmake</a> 文档，安装 Xmake。</p><p>然后进入 Xmake 源码目录进行编译。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span></span></code></pre></div><p>!&gt; 我们需要进入 Xmake 的 core 子目录执行 xmake 命令。</p><h4 id="在-linux-macos-freebsd-上编译" tabindex="-1">在 Linux/macOS/FreeBSD 上编译 <a class="header-anchor" href="#在-linux-macos-freebsd-上编译" aria-label="Permalink to &quot;在 Linux/macOS/FreeBSD 上编译&quot;">​</a></h4><p>其他类 unix 平台环境编译 Xmake，我们只需要在源码根目录执行 make 就行了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./configure</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span></code></pre></div><h3 id="加载调试" tabindex="-1">加载调试 <a class="header-anchor" href="#加载调试" aria-label="Permalink to &quot;加载调试&quot;">​</a></h3><p>如果编译完成，我们就可以加载刚刚编译好的 Xmake 二进制 core 程序，然后运行本地的 Lua 脚本了。</p><h4 id="在-windows-上加载本地调试环境" tabindex="-1">在 Windows 上加载本地调试环境 <a class="header-anchor" href="#在-windows-上加载本地调试环境" aria-label="Permalink to &quot;在 Windows 上加载本地调试环境&quot;">​</a></h4><p>进入 <code>xmake/scripts</code> 目录，双击 srcenv.bat 脚本，它会自动加载本地的 Xmake 程序和脚本，打开一个 cmd 终端。</p><p>我们在这个终端下，就可以开启调试了。</p><p>我们也可以运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> os.programdir</span></span></code></pre></div><p>来验证我们是否真的加载了本地的 Lua 脚本环境。</p><h4 id="在其他平台加载本地调试环境" tabindex="-1">在其他平台加载本地调试环境 <a class="header-anchor" href="#在其他平台加载本地调试环境" aria-label="Permalink to &quot;在其他平台加载本地调试环境&quot;">​</a></h4><p>在 Linux/macOS/FreeBSD 上会更加简单点，只需要运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/srcenv.profile</span></span></code></pre></div><p>就能进入本地源码调试环境。</p><h3 id="调试-core-二进制" tabindex="-1">调试 core 二进制 <a class="header-anchor" href="#调试-core-二进制" aria-label="Permalink to &quot;调试 core 二进制&quot;">​</a></h3><p>通常调试 Xmake 的 Lua 脚本，只需要直接修改当前源码目录的 Lua 脚本就行了，实时生效的，我们并不需要重复编译 core 二进制。</p><p>但是如果是 Xmake 的 C 端 core 程序有问题，需要调试或者加模块，那么就需要重复编译了。</p><p>编译完成，也是实时生效的，我们可以在 C 代码里通过：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tb_trace_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xmake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>来格式化打印各种输出。</p><p>如果是 tbox 等 Xmake 依赖的各种 submodules 子模块有问题，需要调试。</p><p>我们也可以直接进入子模块源码，修改后重新编译执行。</p><p>但是，如果需要贡献修复补丁，我们需要提交 pr 给子模块的仓库才行，补丁合并后，作者会在特定时间同步到到 Xmake 源码仓库。</p><h3 id="断点调试" tabindex="-1">断点调试 <a class="header-anchor" href="#断点调试" aria-label="Permalink to &quot;断点调试&quot;">​</a></h3><p>2.8.3 版本，我们新增了 Lua 断点调试支持，配合 <a href="https://github.com/EmmyLua/VSCode-EmmyLua" target="_blank" rel="noreferrer">VSCode-EmmyLua</a> 插件，我们可以很方便的在 VSCode 中断点调试 Xmake 自身源码。</p><p>首先，我们需要在 VSCode 的插件市场安装 VSCode-EmmyLua 插件，然后执行下面的命令更新下 xmake-repo 仓库保持最新。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xrepo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-repo</span></span></code></pre></div><p>!&gt; Xmake 也需要保持最新版本。</p><p>然后，在自己的工程目录下执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xrepo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emmylua_debugger</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>其中 <code>xrepo env -b emmylua_debugger</code> 用于绑定 EmmyLua 调试器插件环境，而 <code>--</code> 后面的参数，就是我们实际需要被调试的 xmake 命令。</p><p>通常我们仅仅调试 <code>xmake build</code> 构建，如果想要调试其他命令，可以自己调整，比如想要调试 <code>xmake install -o /tmp</code> 安装命令，那么可以改成：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xrepo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emmylua_debugger</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span></code></pre></div><p>执行完上面的命令后，它不会立即退出，会一直处于等待调试状态，有可能没有任何输出。</p><p>这个时候，我们不要急着退出它，继续打开 VSCode，并在 VSCode 中打开 Xmake 的 Lua 脚本源码目录。</p><p>也就是这个目录：<a href="https://github.com/xmake-io/xmake/tree/master/xmake" target="_blank" rel="noreferrer">Xmake Lua Scripts</a>，我们可以下载的本地，也可以直接打开 Xmake 安装目录中的 lua 脚本目录。</p><p>然后切换到 VSCode 的调试 Tab 页，点击 <code>RunDebug</code> -&gt; <code>Emmylua New Debug</code> 就能连接到我们的 <code>xmake build</code> 命令调试端，开启调试。</p><p>如下图所示，默认的起始断点会自动中断到 <code>debugger:_start_emmylua_debugger</code> 内部，我们可以点击单步跳出当前函数，就能进入 main 入口。</p><p><img src="`+i+'" alt=""></p><p>然后设置自己的断点，点击继续运行，就能中断到自己想要调试的代码位置。</p><p>我们也可以在项目工程的配置脚本中设置断点，也可以实现快速调试自己的配置脚本，而不仅仅是 Xmake 自身源码。</p><p><img src="'+a+`" alt=""></p><h3 id="远程调试" tabindex="-1">远程调试 <a class="header-anchor" href="#远程调试" aria-label="Permalink to &quot;远程调试&quot;">​</a></h3><p>2.8.3 版本现在也能支持远程调试，其实这个功能主要是给作者用的，因为作者本人的开发电脑是 mac，但是有时候还是需要能够在 windows 上调试 xmake 源码脚本。</p><p>但是在虚拟机中调试，太卡，体验不好，并且作者本人的电脑磁盘空间不够，因此我通常会远程连到单独的 windows 主机上去调试 xmake 源码。</p><p>我们先在 windows 机器上开启远程编译服务：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span></span></code></pre></div><p>然后本机打开需要构建的工程目录，执行远程连接，然后执行 <code>xmake service --sync --xmakesrc=</code> 去同步本地源码：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --connect</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --xmakesrc=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/projects/personal/xmake/xmake/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><p>这样，我们就能本地修改 xmake 脚本源码，然后同步到远程 windows 机器上，然后远程执行 xmake 构建命令，获取对应的调试输出，以及分析构建行为。</p><p>我们也能够通过 <code>xmake service --pull=</code> 命令，回拉远程的文件到本地，进行分析。</p><p>注：详细的远程编译特性说明，见 <a href="http://xmake.io/#/zh-cn/features/remote_build" target="_blank" rel="noreferrer">远程编译文档</a>。</p><p><img src="`+e+`" alt=""></p><h2 id="如何调试仓库包" tabindex="-1">如何调试仓库包? <a class="header-anchor" href="#如何调试仓库包" aria-label="Permalink to &quot;如何调试仓库包?&quot;">​</a></h2><p>调试的方式有很多种，这里我主要介绍作者最常使用的调试方式，那就是直接拉取 xmake-repo 仓库来调试。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xmake-io/xmake-repo.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span></code></pre></div><p>使用上面 test.lua 脚本命令来调试包，我们可以重复安装测试指定的包，<code>--shallow</code> 告诉 Xmake 每次测试不去重复完整安装它的所有依赖包，仅仅测试按照当前包。</p><p>我们也可以测试指定的平台，架构，编译模式，vs_runtime 和动态库，静态库等等。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mingw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mingw=/xxx/sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iphoneos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --vs_runtime=MD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span></code></pre></div><h3 id="调试本地包源码" tabindex="-1">调试本地包源码 <a class="header-anchor" href="#调试本地包源码" aria-label="Permalink to &quot;调试本地包源码&quot;">​</a></h3><p>有时候，由于包的源码和构建脚本有问题，我们需要修改一些代码才能继续测试安装，如果通过 add_patches/io.replace 的方式在 on_install 里面去修改调试，非常繁琐。</p><p>因此，我们可以通过指定 <code>-d package_sourcedir</code> 方式，直接让测试脚本进入我们预先下载好的包源码目录，测试编译安装，我们每次的代码修改不会被重置。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/zlib-1.2.11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span></code></pre></div><p>等修改调试通过后，我们再根据改动，通过 <code>git diff &gt; fix.patch</code> 生成补丁文件，通过 <code>add_patches</code> 配置应用补丁包，来修复包的安装。</p><h3 id="远程调试包源码" tabindex="-1">远程调试包源码 <a class="header-anchor" href="#远程调试包源码" aria-label="Permalink to &quot;远程调试包源码&quot;">​</a></h3><p>我们也可以远程调试包，先开启远程服务：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span></span></code></pre></div><p>然后传入 <code>--remote</code> 参数，即可实现远程包编译测试。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/test.lua</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shallow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/zlib-1.2.11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zlib</span></span></code></pre></div><h2 id="下载包提示证书校验失败怎么办" tabindex="-1">下载包提示证书校验失败怎么办？ <a class="header-anchor" href="#下载包提示证书校验失败怎么办" aria-label="Permalink to &quot;下载包提示证书校验失败怎么办？&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (60) SSL certificate problem: unable to get </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> issuer certificate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">More</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> details</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> here:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://curl.se/docs/sslcerts.html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> legitimacy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> therefore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> could</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">establish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> learn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> situation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">how</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> visit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mentioned</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> above.</span></span></code></pre></div><p>如果你在使用 Xmake 安装依赖包时候，遇到上面的证书验证问题，你可以尝试更新 curl 证书去修复它，或者直接全局配置禁用证书验证来绕过它。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --insecure-ssl=y</span></span></code></pre></div><p>当然，禁用证书验证会带来一定的安全性风险，不过好在 xmake-repo 仓库中的包，有严格的 sha256 校验， 即使下载被劫持，最终也会 xmake 的 sha256 校验检测到，作为无效下载。</p>`,130)]))}const u=h(n,[["render",k]]);export{y as __pageData,u as default};
