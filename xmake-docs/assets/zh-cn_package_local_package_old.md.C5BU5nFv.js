import{_ as s,c as e,a2 as i,o as p}from"./chunks/framework.CQcFAaaG.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-cn/package/local_package_old.md","filePath":"zh-cn/package/local_package_old.md"}'),t={name:"zh-cn/package/local_package_old.md"};function n(l,a,c,d,h,o){return p(),e("div",null,a[0]||(a[0]=[i(`<h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>这是很早期的打包方案，跟 <code>add_requires()</code> 和 <code>add_packages()</code> 不兼容，正在逐步被废弃。</p><p>2.5.5 开始采用新的本地包方案，具体见：<a href="/xmake-docs/zh-cn/package/local_package.html">新版本地包方案</a>。</p><p>如果还想使用老的打包方式，可以执行下面的命令，指定下包格式：<code>oldpkg</code></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package -f oldpkg</span></span></code></pre></div><p>来代替之前的</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package</span></span></code></pre></div><h3 id="打包说明" tabindex="-1">打包说明 <a class="header-anchor" href="#打包说明" aria-label="Permalink to &quot;打包说明&quot;">​</a></h3><p>通过在项目中内置依赖包目录以及二进制包文件，可以方便的集成一些第三方的依赖库，这种方式比较简单直接，但是缺点也很明显，不方便管理。</p><p>以tbox工程为例，其依赖包如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- base.pkg</span></span>
<span class="line"><span>- zlib.pkg</span></span>
<span class="line"><span>- polarssl.pkg</span></span>
<span class="line"><span>- openssl.pkg</span></span>
<span class="line"><span>- mysql.pkg</span></span>
<span class="line"><span>- pcre.pkg</span></span>
<span class="line"><span>- ...</span></span></code></pre></div><p>如果要让当前工程识别加载这些包，首先要指定包目录路径，例如：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_packagedirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>指定好后，就可以在target作用域中，通过<a href="/xmake-docs/zh-cn/manual/project_target.html?id=targetadd_packages">add_packages</a>接口，来添加集成包依赖了，例如：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    add_packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zlib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;polarssl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pcre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>那么如何去生成一个*.pkg的包呢，如果是基于xmake的工程，生成方式很简单，只需要：</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cd tbox</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package</span></span></code></pre></div><p>即可在build目录下生成一个tbox.pkg的跨平台包，给第三方项目使用，我也可以直接设置输出目录，编译生成到对方项目中去，例如：</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ cd tbox</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ xmake package -o ../test/packages</span></span></code></pre></div><p>这样，test工程就可以通过[add_packages]((/zh-cn/manual/project_target?id=targetadd_packages)和<a href="/xmake-docs/zh-cn/manual/global_interfaces.html?id=add_packagedirs">add_packagedirs</a>去配置和使用tbox.pkg包了。</p><p>关于内置包的详细描述，还可以参考下相关文章，这里面有详细介绍：<a href="https://tboox.org/cn/2016/08/06/add-package-and-autocheck/" target="_blank" rel="noreferrer">依赖包的添加和自动检测机制</a></p>`,21)]))}const r=s(t,[["render",n]]);export{g as __pageData,r as default};
