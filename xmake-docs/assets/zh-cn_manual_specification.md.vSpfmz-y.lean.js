import{_ as d,c as e,a2 as o,o as a}from"./chunks/framework.CQcFAaaG.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-cn/manual/specification.md","filePath":"zh-cn/manual/specification.md"}'),c={name:"zh-cn/manual/specification.md"};function r(n,t,i,s,p,u){return a(),e("div",null,t[0]||(t[0]=[o('<h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><p>接口的命名，是有按照预定义的一些规范来命名的，这样更加方便理解和易于使用，目前命名按照如下一些规则：</p><table tabindex="0"><thead><tr><th>接口规则</th><th>描述</th></tr></thead><tbody><tr><td><code>is_</code>, <code>has_</code>前缀的接口</td><td>表示为条件判断</td></tr><tr><td><code>set_</code>前缀的接口</td><td>表示为覆盖设置</td></tr><tr><td><code>add_</code>前缀的接口</td><td>表示为追加设置</td></tr><tr><td><code>s</code>后缀的接口</td><td>表示支持多值传入，例如：<code>add_files(&quot;*.c&quot;, &quot;test.cpp&quot;)</code></td></tr><tr><td><code>on_</code>前缀的接口</td><td>表示为覆盖内置脚本</td></tr><tr><td><code>before_</code>前缀的接口</td><td>表示为在内置脚本运行前，执行此脚本</td></tr><tr><td><code>after_</code>前缀的接口</td><td>表示为在内置脚本运行后，执行此脚本</td></tr><tr><td><code>scope(&quot;name&quot;)</code>的接口</td><td>表示为定义一个描述域，例如：<code>target(&quot;xxx&quot;)</code>, <code>option(&quot;xxx&quot;)</code></td></tr><tr><td>描述域/描述设置</td><td>建议缩进表示</td></tr></tbody></table>',3)]))}const _=d(c,[["render",r]]);export{h as __pageData,_ as default};
