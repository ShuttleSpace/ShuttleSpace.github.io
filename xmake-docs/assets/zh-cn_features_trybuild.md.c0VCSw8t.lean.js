import{_ as i,c as a,a2 as n,o as h}from"./chunks/framework.CQcFAaaG.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-cn/features/trybuild.md","filePath":"zh-cn/features/trybuild.md"}'),l={name:"zh-cn/features/trybuild.md"};function t(k,s,e,p,d,r){return h(),a("div",null,s[0]||(s[0]=[n(`<p>xmake v2.3.1以上版本直接对接了其他第三方构建系统，即使其他项目中没有使用xmake.lua来维护，xmake也可以直接调用其他构建工具来完成编译。</p><p>那用户直接调用使用第三方构建工具来编译不就行了，为啥还要用xmake去调用呢？主要有以下好处：</p><ol><li>完全的行为一致，简化编译流程，不管用了哪个其他构建系统，都只需要执行xmake这个命令就可以编译，用户不再需要去研究其他工具的不同的编译流程</li><li>完全对接<code>xmake config</code>的配置环境，复用xmake的平台探测和sdk环境检测，简化平台配置</li><li>对接交叉编译环境，即使是用autotools维护的项目，也能通过xmake快速实现交叉编译</li></ol><p>目前已支持的构建系统：</p><ul><li>autotools（已完全对接xmake的交叉编译环境）</li><li>xcodebuild</li><li>cmake（已完全对接xmake的交叉编译环境）</li><li>make</li><li>msbuild</li><li>scons</li><li>meson</li><li>bazel</li><li>ndkbuild</li><li>ninja</li></ul><h3 id="自动探测构建系统并编译" tabindex="-1">自动探测构建系统并编译 <a class="header-anchor" href="#自动探测构建系统并编译" aria-label="Permalink to &quot;自动探测构建系统并编译&quot;">​</a></h3><p>例如，对于一个使用cmake维护的项目，直接在项目根目录执行xmake，就会自动触发探测机制，检测到CMakeLists.txt，然后提示用户是否需要使用cmake来继续完成编译。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">note:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMakeLists.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> try</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> building</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pass </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --confirm=y/n/d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> skip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y/n)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Symbol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prefix:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Configuring</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Generating</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> written</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/ruki/Downloads/libpng-1.6.35/build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[  7%] Built target png-fix-itxt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ 21%] Built target genfiles</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ 81%] Built target png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ 83%] Built target png_static</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/ruki/Downloads/libpng-1.6.35/build/artifacts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ok!</span></span></code></pre></div><h3 id="无缝对接xmake命令" tabindex="-1">无缝对接xmake命令 <a class="header-anchor" href="#无缝对接xmake命令" aria-label="Permalink to &quot;无缝对接xmake命令&quot;">​</a></h3><p>目前支持<code>xmake clean</code>, <code>xmake --rebuild</code>和<code>xmake config</code>等常用命令与第三方系统的无缝对接。</p><p>我们可以直接清理cmake维护项目的编译输出文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span></code></pre></div><p>如果带上<code>--all</code>执行清理，会清除autotools/cmake生成的所有文件，不仅仅只清理对象文件。</p><p>默认<code>xmake</code>对接的是增量构建行为，不过我们也可以强制快速重建：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rebuild</span></span></code></pre></div><h3 id="手动切换指定构建系统" tabindex="-1">手动切换指定构建系统 <a class="header-anchor" href="#手动切换指定构建系统" aria-label="Permalink to &quot;手动切换指定构建系统&quot;">​</a></h3><p>如果一个项目下有多个构建系统同时在维护，比如libpng项目，自带autotools/cmake/makefile等构建系统维护，xmake默认优先探测使用了autotools，如果想要强制切换其他构建系统，可以执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=[autotools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cmake</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">msbuild</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ..]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>另外，配置了<code>--trybuild=</code>参数手动指定了默认的构建系统，后续的build过程就不会额外提示用户选择了。</p><h3 id="实现快速交叉编译" tabindex="-1">实现快速交叉编译 <a class="header-anchor" href="#实现快速交叉编译" aria-label="Permalink to &quot;实现快速交叉编译&quot;">​</a></h3><p>众所周知，cmake/autotools维护的项目虽然很多都支持交叉编译，但是交叉编译的配置过程很复杂，不同的工具链处理方式还有很多的差异，中途会踩到很多的坑。</p><p>即使跑通了一个工具链的交叉编译，如果切到另外一个工具链环境，可能又要折腾好久，而如果使用xmake，通常只需要两条简单的命令即可：</p><p>!&gt; 目前cmake/autotools都已对接支持了xmake的交叉编译。</p><h4 id="交叉编译android平台" tabindex="-1">交叉编译android平台 <a class="header-anchor" href="#交叉编译android平台" aria-label="Permalink to &quot;交叉编译android平台&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=autotools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [--ndk=xxx]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>!&gt; 其中，--ndk参数配置是可选的，如果用户设置了ANDROID_NDK_HOME环境变量，或者ndk放置在~/Library/Android/sdk/ndk-bundle，xmake都能自动检测到。</p><p>是不是很简单？如果你觉得这没啥，那么可以对比下直接操作<code>./configure</code>去配置交叉编译，可以看下这篇文档对比下：<a href="https://developer.android.com/ndk/guides/other_build_systems#autoconf" target="_blank" rel="noreferrer">将NDK 与其他编译系统配合使用</a></p><p>说白了，你大概得这样，还不一定一次就能搞定：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TOOLCHAIN=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/toolchains/llvm/prebuilt/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOST_TAG</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AR=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android-ar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AS=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android-as</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CC=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android21-clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CXX=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android21-clang++</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LD=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android-ld</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RANLIB=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android-ranlib</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STRIP=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOOLCHAIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/aarch64-linux-android-strip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aarch64-linux-android</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span></code></pre></div><p>如果是cmake呢，交叉编译也不省事，对于android平台，得这么配置。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -DCMAKE_TOOLCHAIN_FILE=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NDK</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/build/cmake/android.toolchain.cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -DANDROID_ABI=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ABI</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -DANDROID_NATIVE_API_LEVEL=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MINSDKVERSION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $OTHER_ARGS</span></span></code></pre></div><p>而对于 ios 平台，没找到简单的配置方式，就找到个第三方的 ios 工具链配置，很复杂：<a href="https://github.com/leetal/ios-cmake/blob/master/ios.toolchain.cmake" target="_blank" rel="noreferrer">https://github.com/leetal/ios-cmake/blob/master/ios.toolchain.cmake</a></p><p>对于 mingw 又是另外一种方式，我又折腾了半天环境，很是折腾。</p><p>而对接了xmake后，不管是cmake还是autotools，交叉编译都是非常简单的，而且配置方式也完全一样，精简一致。</p><h4 id="交叉编译iphoneos平台" tabindex="-1">交叉编译iphoneos平台 <a class="header-anchor" href="#交叉编译iphoneos平台" aria-label="Permalink to &quot;交叉编译iphoneos平台&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iphoneos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=[cmake</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">autotools]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><h4 id="交叉编译mingw平台" tabindex="-1">交叉编译mingw平台 <a class="header-anchor" href="#交叉编译mingw平台" aria-label="Permalink to &quot;交叉编译mingw平台&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mingw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=[cmake</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">autotools]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [--mingw=xxx]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><h4 id="使用其他交叉编译工具链" tabindex="-1">使用其他交叉编译工具链 <a class="header-anchor" href="#使用其他交叉编译工具链" aria-label="Permalink to &quot;使用其他交叉编译工具链&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cross</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=[cmake</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">autotools]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sdk=/xxxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>关于更多交叉编译的配置细节，请参考文档：<a href="https://xmake.io/#/zh-cn/guide/configuration?id=%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91" target="_blank" rel="noreferrer">交叉编译</a>，除了多了一个<code>--trybuild=</code>参数，其他交叉编译配置参数都是完全通用的。</p><h3 id="传递用户配置参数" tabindex="-1">传递用户配置参数 <a class="header-anchor" href="#传递用户配置参数" aria-label="Permalink to &quot;传递用户配置参数&quot;">​</a></h3><p>我们可以通过<code>--tryconfigs=</code>来传递用户额外的配置参数到对应的第三方构建系统，比如：autotools会传递给<code>./configure</code>，cmake会传递给<code>cmake</code>命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=autotools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tryconfigs=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--enable-shared=no&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>比如上述命令，传递<code>--enable-shared=no</code>给<code>./configure</code>，来禁用动态库编译。</p><p>另外，对于<code>--cflags</code>, <code>--includedirs</code>和<code>--ldflags</code>等参数，不需要通过<code>--tryconfigs</code>，通过<code>xmake config --cflags=</code>等内置参数就可透传过去。</p><h3 id="编译其他构建系统过程示例" tabindex="-1">编译其他构建系统过程示例 <a class="header-anchor" href="#编译其他构建系统过程示例" aria-label="Permalink to &quot;编译其他构建系统过程示例&quot;">​</a></h3><h4 id="通用编译方式" tabindex="-1">通用编译方式 <a class="header-anchor" href="#通用编译方式" aria-label="Permalink to &quot;通用编译方式&quot;">​</a></h4><p>大多数情况下，每个构建系统对接后的编译方式都是一致的，除了<code>--trybuild=</code>配置参数除外。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=[autotools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cmake</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meson</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ninja</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bazel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">msbuild</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xcodebuild]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>!&gt; 我们还需要确保--trybuild指定的构建工具已经安装能够正常使用。</p><h4 id="构建android-jni程序" tabindex="-1">构建Android jni程序 <a class="header-anchor" href="#构建android-jni程序" aria-label="Permalink to &quot;构建Android jni程序&quot;">​</a></h4><p>如果当前项目下存在<code>jni/Android.mk</code>，那么xmake可以直接调用ndk-build来构建jni库。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trybuild=ndkbuild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [--ndk=]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><p>如果觉得命令行编译jni比较麻烦，xmake也提供了相关的gradle集成插件<a href="https://github.com/xmake-io/xmake-gradle" target="_blank" rel="noreferrer">xmake-gradle</a>，可以无缝集成xmake进行jni库的编译集成，具体详情见：<a href="https://xmake.io/#/zh-cn/plugin/more_plugins?id=gradle%e6%8f%92%e4%bb%b6%ef%bc%88jni%ef%bc%89" target="_blank" rel="noreferrer">使用xmake-gradle插件构建JNI程序</a></p>`,55)]))}const g=i(l,[["render",t]]);export{o as __pageData,g as default};
